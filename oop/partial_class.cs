/*
The partial class

You can split a class, a struct, or an interface into smaller portions that can be placed in
different code files. If you want to do this, you have to use the keyword partial. Even
though the code is in separate code files, when complied, they will be treated as one class
altogether. There are many benefits of partial classes. One benefit is that different
developers can work on different code files at a time. Another benefit is that if you are
using autogenerated code and you want to extend some functionality of that autogenerated
code, you can use a partial class in a separate file. Consequently, you are not directly
touching the autogenerated code, but adding new functionality in the class.


The partial class has a few requirements, one of which is that all classes must have the
keyword partial in their signatures.

- All the partial classes also have to have the same name, but the file names can be different.
- The partial classes also have to have the same accessibility, such as public, private, and so on.


    var c = new PartialClass();
    c.Method1();
    c.Method2();

*/

public partial class PartialClass
{
    public void Method1()
    {
        Console.WriteLine("Method1");
    }
}

public partial class PartialClass
{
    public void Method2()
    {
        Console.WriteLine("Method1");
    }
}
